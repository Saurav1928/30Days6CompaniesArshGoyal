class Solution {
public:
int floydWarshal(vector<vector<int>> cost, int threshold)
{
    int n = cost.size() - 1;
    for (int k = 1; k <= n; k++)
    {
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= n; j++)
                cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);
        }
    }
    int ans=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        ans+=(cost[i][j]<=threshold);
    }
    return ans;
    
}


    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>>cost(n+1, vector<int>(n+1, INT_MAX));
        for(auto edge :edges){
            int u=edge[0], v=edge[1];
            int w=edge[2];
            cost[u][v]=w;
            cost[v][u]=w;
        }
        for(int i=0;i<n;i++)
        cost[i][i]=0;
        return floydWarshal(cost, distanceThreshold);
    }
};
